import os  # Para operaciones de sistema y manejo de rutas
import argparse  # Para procesar argumentos de l√≠nea de comandos
from datetime import datetime  # Para generar marcas de tiempo en los nombres de archivos
from email import message_from_bytes  # Para crear objetos de mensaje desde bytes (no se usa directamente aqu√≠)
from email.parser import BytesParser  # Para parsear mensajes en formato MIME desde bytes
from zope.interface import implementer  # Para implementar interfaces en clases

from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse  # Checker de autenticaci√≥n simple
from twisted.cred.portal import IRealm, Portal  # Para manejar autenticaci√≥n y autorizaci√≥n
from twisted.internet import defer, reactor  # Para programaci√≥n as√≠ncrona y control de eventos con Twisted
from twisted.mail import smtp  # Para implementar funcionalidades de SMTP
from twisted.mail.imap4 import LOGINCredentials, PLAINCredentials  # Para manejo de credenciales de autenticaci√≥n

def parse_arguments():
    """
    Procesa los argumentos de l√≠nea de comandos para configurar el servidor SMTP.
    
    Argumentos:
      -d, --domains:      Lista de dominios aceptados (separados por coma)
      -s, --mail-storage: Directorio donde se almacenar√°n los correos
      -p, --port:         Puerto en el que se ejecutar√° el servidor SMTP
    Retorna:
      Los argumentos parseados.
    """
    # Crear un parser para los argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(description="SMTP Server usando Twisted")

    # Agregar argumento para los dominios aceptados
    parser.add_argument('-d', '--domains', type=str, required=True,
                        help='Dominios aceptados por el servidor (separados por coma)')
    
    # Agregar argumento para el directorio de almacenamiento de correos
    parser.add_argument('-s', '--mail-storage', type=str, required=True,
                        help='Directorio de almacenamiento de correos')
    
    # Agregar argumento para el puerto del servidor SMTP
    parser.add_argument('-p', '--port', type=int, required=True,
                        help='Puerto donde se ejecutar√° el servidor')

    # Parsear y retornar los argumentos
    return parser.parse_args()


@implementer(smtp.IMessage)
class ConsoleMessage:
    """
    Implementaci√≥n de la interfaz IMessage para manejar mensajes SMTP.
    
    Esta clase recoge las l√≠neas del mensaje entrante, extrae informaci√≥n 
    relevante y guarda el mensaje en el sistema de archivos.
    """
    def __init__(self, mail_storage, sender=None, recipient=None):
        self.lines = []  # Almacena las l√≠neas del mensaje
        self.mail_storage = mail_storage

        # Convertir sender a cadena si es un objeto Address o tiene atributo 'dest'
        if isinstance(sender, smtp.Address):
            self.sender = str(sender)
        elif hasattr(sender, 'dest'):
            self.sender = str(sender.dest)
        else:
            self.sender = sender

        # Convertir recipient a cadena de forma similar
        if isinstance(recipient, smtp.Address):
            self.recipient = str(recipient)
        elif hasattr(recipient, 'dest'):
            self.recipient = str(recipient.dest)
        else:
            self.recipient = recipient

    def lineReceived(self, line):
        """
        Se invoca cada vez que se recibe una l√≠nea del mensaje SMTP.
        Decodifica la l√≠nea (si es bytes) y la almacena.
        Adem√°s, extrae encabezados 'From' y 'To' para actualizar remitente y destinatario.
        """
        if isinstance(line, bytes):
            line = line.decode("utf-8")
        self.lines.append(line)

        # Actualiza el remitente si se encuentra el encabezado "From:"
        if line.startswith("From:"):
            self.sender = line.split(":", 1)[1].strip()
        # Actualiza el destinatario si se encuentra el encabezado "To:"
        if line.startswith("To:"):
            self.recipient = line.split(":", 1)[1].strip()

    def eomReceived(self):
        """
        Se invoca cuando se recibe el fin del mensaje.
        Imprime el mensaje, guarda el correo en disco y retorna una confirmaci√≥n.
        """
        print("Nuevo mensaje recibido:")
        print("\n".join(self.lines))
    
        # Si falta remitente o destinatario, se indica error pero se confirma recepci√≥n
        if not self.sender or not self.recipient:
            print("‚ùå No se puede guardar el mensaje: falta remitente o destinatario.")
            return defer.succeed('250 OK')
    
        # Extraer nombre de usuario y dominio del destinatario
        recipient_name, recipient_domain = self.recipient.split('@')
    
        # Crear la estructura de carpetas: ./<mail_storage>/<dominio>/<usuario>
        domain_folder = os.path.join(self.mail_storage, recipient_domain)
        user_folder = os.path.join(domain_folder, recipient_name)
    
        # Crear las carpetas si no existen
        os.makedirs(user_folder, exist_ok=True)
    
        # Generar un nombre de archivo √∫nico usando timestamp y el remitente
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        file_name = f"{timestamp}_{self.sender.replace('@', '_').replace('.', '_')}.eml"
        file_path = os.path.join(user_folder, file_name)
    
        # Procesar el mensaje como MIME para manejar adjuntos correctamente
        raw_message = "\n".join(self.lines).encode("utf-8")
        message = BytesParser().parsebytes(raw_message)
    
        # Escribir el mensaje en formato de cadena en el archivo
        with open(file_path, 'w') as f:
            f.write(message.as_string())
    
        print(f"‚úÖ Mensaje guardado en: {file_path}")
    
        # Limpiar los datos internos para liberar recursos
        self.lines = None
        self.sender = None
        self.recipient = None
    
        # Confirmar la recepci√≥n exitosa del mensaje
        return defer.succeed('250 OK')

    def connectionLost(self):
        """
        Se invoca cuando se pierde la conexi√≥n.
        Realiza la limpieza de datos internos.
        """
        self.lines = None


@implementer(smtp.IMessageDelivery)
class ConsoleMessageDelivery:
    """
    Implementaci√≥n de la interfaz IMessageDelivery para la recepci√≥n de mensajes SMTP.
    
    Valida remitentes y destinatarios, y genera instancias de ConsoleMessage para manejar
    el almacenamiento de los mensajes.
    """
    def __init__(self, accepted_domains, mail_storage):
        self.accepted_domains = accepted_domains
        self.mail_storage = mail_storage
        os.makedirs(self.mail_storage, exist_ok=True)
        self.sender = None

    def receivedHeader(self, helo, origin, recipients):
        """
        Se invoca para generar un encabezado Received para el mensaje.
        Aqu√≠ se muestra informaci√≥n b√°sica y se retorna None para usar el valor por defecto.
        """
        print(f"Received: ConsoleMessageDelivery from {origin}")
        return None

    def validateFrom(self, helo, origin):
        """
        Valida el remitente del mensaje.
        Registra y retorna el origen si es aceptable.
        """
        print(f"üì• Remitente aceptado: {origin}")
        self.sender = origin
        return origin

    def validateTo(self, user):
        """
        Valida el destinatario.
        Solo se aceptan destinatarios cuyo dominio est√© en la lista de dominios aceptados.
        Si es v√°lido, retorna una funci√≥n que crea un ConsoleMessage.
        De lo contrario, lanza una excepci√≥n SMTPBadRcpt.
        """
        domain = user.dest.domain.decode('utf-8')
        if domain in self.accepted_domains:
            print(f"üì• Destinatario aceptado: {user.dest}")
            return lambda: ConsoleMessage(self.mail_storage, self.sender, user.dest)
        raise smtp.SMTPBadRcpt(user)


class ConsoleSMTPFactory(smtp.SMTPFactory):
    """
    F√°brica de protocolos SMTP que configura el manejo de mensajes y autenticaci√≥n.
    
    Utiliza ConsoleMessageDelivery para el procesamiento de mensajes entrantes y
    configura los mecanismos de autenticaci√≥n LOGIN y PLAIN.
    """
    protocol = smtp.ESMTP

    def __init__(self, portal, accepted_domains, mail_storage):
        smtp.SMTPFactory.__init__(self)
        self.delivery = ConsoleMessageDelivery(accepted_domains, mail_storage)
        self.portal = portal

    def buildProtocol(self, addr):
        """
        Construye y configura una instancia del protocolo SMTP.
        Asigna la instancia de delivery y configura los challengers de autenticaci√≥n.
        """
        p = smtp.SMTPFactory.buildProtocol(self, addr)
        p.delivery = self.delivery
        p.challengers = {b"LOGIN": LOGINCredentials, b"PLAIN": PLAINCredentials}
        return p


@implementer(IRealm)
class SimpleRealm:
    """
    Implementaci√≥n simple de un Realm para Twisted Cred.
    
    Permite solicitar un avatar que implementa IMessageDelivery para el manejo de mensajes.
    """
    def __init__(self, accepted_domains, mail_storage):
        self.accepted_domains = accepted_domains
        self.mail_storage = mail_storage

    def requestAvatar(self, avatarId, mind, *interfaces):
        """
        Retorna un avatar que implementa IMessageDelivery si se solicita esa interfaz.
        De lo contrario, lanza NotImplementedError.
        """
        if smtp.IMessageDelivery in interfaces:
            return smtp.IMessageDelivery, ConsoleMessageDelivery(self.accepted_domains, self.mail_storage), lambda: None
        raise NotImplementedError()


def main():
    """
    Funci√≥n principal que configura y ejecuta el servidor SMTP.
    
    Procesa los argumentos de l√≠nea de comandos, configura el almacenamiento de correos,
    crea el portal de autenticaci√≥n y arranca el reactor de Twisted para escuchar conexiones.
    """
    args = parse_arguments()

    # Lista de dominios permitidos (separados por coma)
    accepted_domains = args.domains.split(',')

    # Convertir la ruta de almacenamiento a una ruta absoluta
    mail_storage = os.path.abspath(args.mail_storage)
    
    # Crear el portal para autenticaci√≥n con un realm simple
    portal = Portal(SimpleRealm(accepted_domains, mail_storage))
    # Usar un checker en memoria para autenticaci√≥n (no usar en producci√≥n)
    checker = InMemoryUsernamePasswordDatabaseDontUse()
    checker.addUser("guest", "password")
    portal.registerChecker(checker)

    # Crear la f√°brica SMTP con la configuraci√≥n establecida
    factory = ConsoleSMTPFactory(portal, accepted_domains, mail_storage)

    print(f"Iniciando el servidor SMTP en el puerto {args.port}")
    reactor.listenTCP(args.port, factory)
    reactor.run()


if __name__ == "__main__":
    main()
